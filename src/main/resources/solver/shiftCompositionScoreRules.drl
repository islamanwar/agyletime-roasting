package com.islam.optaplanner.roasting;

import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScoreHolder;
import com.agyletime.rostering.model.Employee;
import com.agyletime.rostering.model.Task;
import com.agyletime.rostering.model.TaskConflict;

global HardMediumSoftScoreHolder scoreHolder;

//#############################################################################
//######################### HARD CONSTRAINTS ##################################
//#############################################################################
rule "taskLocationMatchesEmployeeLocation"

	when
		$employee : Employee()
		$task : Task(employee == $employee, !$employee.hasLocation($task.location))
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
	end

rule "employeeHasTaskSkill"

	when
		$employee : Employee()
		$task : Task(employee == $employee, !$employee.hasSkill($task.requiredSkill))
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
	end

rule "employeeAvailableToWork"
	when
		$task : Task(employee != null, !employee.worksDuring(this))
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
	end
	
rule "conflictingTasksForEmployee"
	when
		$conflict: TaskConflict($leftTask : leftTask, $rightTask : rightTask)
		$employee : Employee()
		Task(this == $leftTask, employee == $employee)
		Task(this == $rightTask, employee == $employee)
	then
		scoreHolder.addHardConstraintMatch(kcontext, -1);
	end
	
//#############################################################################
//######################### MEDIUM CONSTRAINTS ################################
//#############################################################################
	
rule "taskWithNoEmployee"
	when 
		Task(employee == null)
	then
		scoreHolder.addMediumConstraintMatch(kcontext, -1);
	end